<!--
***********************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Eugene Sadovoi. All rights reserved.

Input Properties:
  PropertyPageSchema:   (Required) - This property holds full file path to XML Property 
                                     Page Schema
  Name:                 (Optional) - Name of the Rule to process
  Quote:                (Optional) - Symbol used for quotation
  SmartQuotes:          (Optional) - If set to true values will be enclosed in quotes only if 
                                     string contains space or Separator char. Enabled by default.
  TrimDelimiters:       (Optional) - Trim trailing Char: ''  - Folder as is       
                                                        true - Trim trailing slash
                                                        false- Add trailing slash 
  FullPath:             (Optional) - Resolves files and forlders to full path                                                        
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="GetXmlConfig" Outputs="$(options)" >

    <Error ContinueOnError="false" Condition="'$(PropertyPageSchema)'==''" 
           Text="Property 'PropertyPageSchema' is missing. Please provide file to process [PropertyPageSchema=property_shecma_file.xml]." />
    <Error ContinueOnError="false" Condition="!Exists('$(PropertyPageSchema)')" 
           Text="File '$(PropertyPageSchema)' is missing. Please provide correct path." />

    <PropertyGroup>
      <NameFilter Condition="'$(Name)'!=''" >[@Name='$(Name)']</NameFilter>
      <IncludedFilter>not(contains(@IncludeInCommandLine, 'false')) and contains(local-name(), 'Property')</IncludedFilter>
      <TypeFilter Condition="'$(FullPath)'=='true'"> and not(@Subtype = 'File') and  not(@Subtype = 'File') and not(@Subtype = 'Folder') and  not(@Subtype = 'folder')</TypeFilter>
      <PathFilter>and (@Subtype = 'File' or @Subtype = 'File' or @Subtype = 'Folder' or @Subtype = 'folder')</PathFilter>
      <TempFile>$([System.IO.Path]::GetTempFileName())</TempFile>
    </PropertyGroup>

    <XmlPeek Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/build/2009/properties'/&gt;"
             XmlInputPath="$(PropertyPageSchema)" Query="/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(TypeFilter)]/@Name|
                             /ns:ProjectSchemaDefinitions/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(TypeFilter)]/@Name">
      <Output TaskParameter="Result" ItemName="Names" />
    </XmlPeek>

    <XmlPeek Namespaces="&lt;Namespace Prefix='ns' Uri='http://schemas.microsoft.com/build/2009/properties'/&gt;"
             XmlInputPath="$(PropertyPageSchema)" Query="/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(PathFilter)]/@Name|
                             /ns:ProjectSchemaDefinitions/ns:Rule$(NameFilter)/*[$(IncludedFilter)$(PathFilter)]/@Name" 
             Condition="'$(FullPath)'=='true'">
      <Output TaskParameter="Result" ItemName="Paths" />
    </XmlPeek>

    <ItemGroup>
      <data-name-map Include="$(%(Names.Identity))" Condition="'@(Names)'!='' And '%(Names.Identity)' !='' And '%(%(Names.Identity))'!=''" >
        <Name>%(Names.Identity)</Name>
      </data-name-map>
      <data-path-map Include="$(%(Paths.Identity))" Condition="'@(Paths)'!='' And '%(Paths.Identity)' !='' And '%(%(Paths.Identity))'!=''" >
        <Name>%(Paths.Identity)</Name>
      </data-path-map>
      <temp-data Condition="'@(data-name-map)'!='' And '%(data-name-map.Identity)'!=''"
                 Include="&lt;Property Name=&#34;%(data-name-map.Name)&#34;   &gt;%(data-name-map.Identity)&lt;/Property&gt;"/>
      <temp-data Condition="'@(data-path-map)'!='' And '%(data-path-map.Identity)'!=''" 
                 Include="&lt;Property Name=&#34;%(data-path-map.Name)&#34;  &gt;$([System.IO.Path]::GetFullPath('%(data-path-map.Identity)'))&lt;/Property&gt;"/>
    </ItemGroup>

    <PropertyGroup Condition="'@(temp-data)'!=''">
      <raw-xsl>
        <!--?xml version="1.0" encoding="utf-8"?-->
        <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                        xmlns:msxsl="urn:schemas-microsoft-com:xslt" 
                        xmlns:msb="http://schemas.microsoft.com/build/2009/properties" >
          <xsl:output method="text" indent="yes"/>
          <xsl:strip-space elements="*" />
          <xsl:param name="Quote" select="'&#34;'" />
          <xsl:param name="SmartQuote" select="'true'" />
          <xsl:param name="TrimDelimiters"  />
          <xsl:param name="DirectorySeparatorChar" select="'\'" />
          <xsl:variable name="Data" >@(temp-data, '')</xsl:variable>
          <xsl:template match="/">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:ProjectSchemaDefinitions">
            <xsl:apply-templates />
          </xsl:template>
          <xsl:template match="msb:Rule">
            <xsl:variable name="DataSet" select="msxsl:node-set($Data)" />
            <xsl:apply-templates select="*[not(@IncludeInCommandLine ='false') and @Name = $DataSet/*/@Name]"  >
              <xsl:with-param name="DefaultSwitchPrefix" select="@SwitchPrefix" />
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringProperty|msb:DynamicEnumProperty|msb:IntProperty|msb:Argument|msb:EnumProperty" >
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:if test="local-name() != 'Argument'">
              <xsl:text>&#32;</xsl:text>
              <xsl:choose>
                <xsl:when test="@SwitchPrefix">
                  <xsl:value-of select="@SwitchPrefix"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$DefaultSwitchPrefix"/>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:value-of select="@Switch"/>
            </xsl:if>
            <xsl:variable name="PropertyName">
              <xsl:choose>
                <xsl:when test="local-name() = 'Argument'" >
                  <xsl:value-of  select="self::node()/@Property" />
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of  select="self::node()//@Name" />
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="sQuote" >
              <xsl:if test="(@Separator != '' and contains($Value, @Separator)) or 
                    contains($Value, ' ') or 
                    $SmartQuote = 'false'">
                <xsl:value-of select="$Quote"/>
              </xsl:if>
            </xsl:variable>
            <xsl:value-of select="@Separator"/>
            <xsl:choose>
              <xsl:when test="local-name() = 'EnumProperty'">
                <xsl:variable name="EnumValName" select="$DataSet/*[@Name = $PropertyName]/text()"/>
                <xsl:variable name="EnumVal" select="self::node()/*[@Name = $EnumValName]" />
                <xsl:value-of select="$EnumVal/@Switch"/>
                <xsl:apply-templates select="$EnumVal/*" >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$sQuote" />
                <xsl:call-template name="Format" >
                  <xsl:with-param name="Value" select="$Value" />
                  <xsl:with-param name="Subtype" select="@Subtype" />
                </xsl:call-template>
                <xsl:value-of select="$sQuote" />
                <xsl:apply-templates >
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
          <xsl:template match="msb:EnumValue">
            <xsl:param name="DataSet" />
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:BoolProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()/@Name" />
            <xsl:variable name="Value" select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:text>&#32;</xsl:text>
            <xsl:choose>
              <xsl:when test="@SwitchPrefix">
                <xsl:value-of select="@SwitchPrefix"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$DefaultSwitchPrefix"/>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="$Value = 'true'">
                <xsl:value-of select="@Switch"/>
              </xsl:when>
              <xsl:when test="$Value = 'false'">
                <xsl:value-of select="@ReverseSwitch"/>
              </xsl:when>
            </xsl:choose>
            <xsl:apply-templates >
              <xsl:with-param name="DataSet" select="$DataSet" />
            </xsl:apply-templates>
          </xsl:template>
          <xsl:template match="msb:StringListProperty">
            <xsl:param name="DefaultSwitchPrefix" />
            <xsl:param name="DataSet" />
            <xsl:variable name="PropertyName" select="self::node()//@Name" />
            <xsl:variable name="Values"       select="$DataSet/*[@Name = $PropertyName]/text()"/>
            <xsl:variable name="List"         select="self::node()" />
            <xsl:choose>
              <xsl:when test="@CommandLineValueSeparator != ''">
                <xsl:text>&#32;</xsl:text>
                <xsl:choose>
                  <xsl:when test="@SwitchPrefix">
                    <xsl:value-of select="@SwitchPrefix"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$DefaultSwitchPrefix"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select="@Switch" />
                <xsl:value-of select="@Separator" />
                <xsl:value-of select="$Quote"/>
                <xsl:for-each select="$Values">
                  <xsl:call-template name="Format" >
                    <xsl:with-param name="Value" select="self::node()" />
                    <xsl:with-param name="Subtype" select="@Subtype" />
                  </xsl:call-template>
                  <xsl:if test="position() != last()">
                    <xsl:value-of select="$List/@CommandLineValueSeparator"/>
                  </xsl:if>
                </xsl:for-each>
                <xsl:value-of select="$Quote"/>
                <xsl:apply-templates>
                  <xsl:with-param name="DataSet" select="$DataSet" />
                </xsl:apply-templates>
              </xsl:when>
              <xsl:otherwise>
                <xsl:for-each select="$Values">
                  <xsl:variable name="Value">
                    <xsl:call-template name="Format" >
                      <xsl:with-param name="Value" select="self::node()" />
                      <xsl:with-param name="Subtype" select="$List/@Subtype" />
                    </xsl:call-template>
                  </xsl:variable>
                  <xsl:variable name="sQuote" >
                    <xsl:if test="($List/@Separator != '' and contains($Value, $List/@Separator)) or contains($Value, ' ') or ($SmartQuote = 'false')">
                      <xsl:value-of select="$Quote"/>
                    </xsl:if>
                  </xsl:variable>
                  <xsl:text>&#32;</xsl:text>
                  <xsl:choose>
                    <xsl:when test="@SwitchPrefix">
                      <xsl:value-of select="@SwitchPrefix"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="$DefaultSwitchPrefix"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:value-of select="$List/@Switch" />
                  <xsl:value-of select="$List/@Separator" />
                  <xsl:value-of select="$sQuote" />
                  <xsl:value-of select="$Value"/>
                  <xsl:value-of select="$sQuote" />
                  <xsl:apply-templates select="$List/*" >
                    <xsl:with-param name="DataSet" select="$DataSet" />
                  </xsl:apply-templates>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
          <xsl:template name="Format">
            <xsl:param name="Value" />
            <xsl:param name="Subtype" />
            <xsl:choose>
              <xsl:when test="contains(translate($Subtype, 'FOLDER', 'folder'), 'folder' ) and 
                     ($TrimDelimiters = 'true' or $TrimDelimiters = 'false') and string-length($Value) != 0" >
                <xsl:choose>
                  <xsl:when test="substring($Value, string-length($Value)) = $DirectorySeparatorChar">
                    <xsl:value-of select="substring($Value, 1, string-length($Value)-1)" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$Value"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$TrimDelimiters = 'false'">
                  <xsl:value-of select="$DirectorySeparatorChar"/>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$Value"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:template>
        </xsl:stylesheet>
      </raw-xsl>
    </PropertyGroup>

    <ItemGroup>
      <xslParameters Condition="'$(Quote)'!=''"           Include="&lt;Parameter Name=&#34;Quote&#34; Value=&#34;$(Quote)&#34; /&gt;" />
      <xslParameters Condition="'$(SmartQuotes)'!=''"     Include="&lt;Parameter Name=&#34;SmartQuotes&#34; Value=&#34;$(SmartQuotes)&#34; /&gt;" />
      <xslParameters Condition="'$(TrimDelimiters)'!=''"  Include="&lt;Parameter Name=&#34;TrimDelimiters&#34; Value=&#34;$(TrimDelimiters)&#34; /&gt;" />
    </ItemGroup>
    
    <XslTransformation Condition="'@(temp-data)'!=''" Parameters="@(xslParameters, '')"
                       XmlInputPaths="$(PropertyPageSchema)" XslContent="$(raw-xsl)" OutputPaths="$(TempFile)" />
    
    <ReadLinesFromFile Condition="'@(temp-data)'!=''" File="$(TempFile)">
      <Output TaskParameter="Lines" PropertyName="options" />
    </ReadLinesFromFile>
    <Delete Condition="'@(temp-data)'!=''" Files="$(TempFile)" />
  </Target>
</Project>

<?xml version="1.0" encoding="utf-8"?>
<!--
***********************************************************************************************
WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright Eugene Sadovoi (C) 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MakeArchitecture Condition="'$(PlatformArchitecture)'=='32'">VC-WIN32</MakeArchitecture>
    <MakeArchitecture Condition="'$(PlatformArchitecture)'=='64'">VC-WIN64A</MakeArchitecture>
    <MakePlatform     Condition="'$(Configuration)'=='Release'">$(MakeArchitecture)</MakePlatform>
    <MakePlatform     Condition="'$(Configuration)'=='Debug'"  >debug-$(MakeArchitecture)</MakePlatform>
    <OutputDir>$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine("$(MSBuildProjectDirectory)", "$(OutDir)"))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</OutputDir>
    <BuildDir>$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine("$(MSBuildProjectDirectory)", "$(IntDir)"))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</BuildDir>
    <RootDir>$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine("$(MSBuildProjectDirectory)", "$(OpensslDir)"))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</RootDir>
    <IncRootDir Condition="'$(IncDir)'!=''">$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine("$(MSBuildProjectDirectory)", "$(IncDir)\.."))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))</IncRootDir>
    <Perl>Perl</Perl>
  </PropertyGroup>


  <!--
  ///////////////////////////////////////////////////////////
  // Files
  ///////////////////////////////////////////////////////////-->
  <ItemGroup>
    <MINFOInputs Include="$(RootDir)\crypto\**\Makefile" />
    <MINFOInputs Include="$(RootDir)\ssl\Makefile" />
    <MINFOInputs Include="$(RootDir)\apps\Makefile" />
    <MINFOInputs Include="$(RootDir)\engines\Makefile" />
    <MINFOInputs Include="$(RootDir)\engines/ccgost\Makefile" />
    <MINFOInputs Include="$(RootDir)\test\Makefile" />
    <MINFOInputs Include="$(RootDir)\tools\Makefile" />

    <CleanConfig  Include="$(BuildDir)\openssl.mak" />
    <CleanConfig  Include="$(RootDir)\MINFO;" />
    <CleanConfig  Include="$(RootDir)\Makefile;" />

    <CleanFiles  Include="$(BuildDir)\uptable.asm" />
    <CleanFiles  Include="$(RootDir)\Makefile.bak;" />
    <CleanFiles  Include="$(RootDir)\crypto/buildinf.h;" />
    <CleanFiles  Include="$(RootDir)\crypto/opensslconf.h;" />
    <CleanFiles  Include="$(RootDir)\crypto/opensslconf.h.bak;" />
    <CleanFiles  Include="$(RootDir)\ms\libeay32.def;" />
    <CleanFiles  Include="$(RootDir)\ms\ssleay32.def;" />
    <CleanFiles  Include="$(RootDir)\ms\version32.rc;" />
    <CleanFiles  Include="$(RootDir)\ms\uptable.obj;" />
    
    <CleanDirs   Include="$(RootDir)\inc32" />
    <CleanDirs   Include="$(RootDir)\out32;$(RootDir)\out32.dbg" />
    <CleanDirs   Include="$(RootDir)\tmp32;$(RootDir)\tmp32.dbg" />
    <CleanDirs   Include="$(MSBuildProjectDirectory)\obj" />
  </ItemGroup>


  

  <!--
  ///////////////////////////////////////////////////////////
  // Checks if Makefile for this $(Platform)|$(Configuration) 
  ///////////////////////////////////////////////////////////-->
  <Target Name="CheckPlatform">
    <ReadLinesFromFile File="$(BuildDir)\openssl.mak" Condition="Exists('$(BuildDir)\openssl.mak')">
      <Output ItemName="ConfigLines" TaskParameter="Lines"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <Selected Include="$([System.Text.RegularExpressions.Regex]::Match(%(ConfigLines.Identity), (?&lt;=PLATFORM=)(.*VC-WIN\d+) ))"
                        Condition="'@(ConfigLines->StartsWith('PLATFORM='))'=='True' AND '@(ConfigLines->Contains('VC-WIN'))'=='True'" />
    </ItemGroup>
    <Delete Files="@(CleanConfig)" Condition="'$([System.Text.RegularExpressions.Regex]::Match($(MakePlatform), (.*VC-WIN\d+) ))'!='@(Selected)'" ContinueOnError="true" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Gets options from UI and runs Configure
  ///////////////////////////////////////////////////////////-->
  <Target Name="Configure" DependsOnTargets="CheckPlatform;"
          Inputs="$(MSBuildProjectFullPath);" Outputs="$(RootDir)\Makefile;"  >

    <MSBuild Projects="@(ProjectReference)" Targets="GetNativeTargetPath"
             Condition="'%(ProjectReference.Project)'=='{8fd826f8-3739-44e6-8cc8-997122e53b8d}'" >
      <Output ItemName="ZLibPath" TaskParameter="TargetOutputs"/>
    </MSBuild>
                                                                                             
    <ItemGroup>
      <Options Include="zlib"                 Condition="'%(ZLibPath.Extension)'=='.lib'" />
      <Options Include="zlib-dynamic"         Condition="'%(ZLibPath.Extension)'=='.dll'" />
      <Options Include="no-threads"           Condition="'$(Multithreading)'=='false'" />
      <Options Include="$(MakePlatform)" />
      <Options Include="-DUNICODE -D_UNICODE" Condition="'$(CharacterSet)'=='Unicode'"/>
    </ItemGroup>

    <MSBuild Targets="GetXmlConfig" Projects="$(MSBuildProjectFullPath)" BuildInParallel="true"
             Properties="PropertyPageSchema=%(PropertyPageSchema.Identity)" >
      <Output ItemName="Options" TaskParameter="TargetOutputs"/>
    </MSBuild>
    <Message Importance="high" Text="Options: @(Options, ' ')" />
    <Exec Command="perl Configure @(Options, ' ')" WorkingDirectory="$(RootDir)" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Creates MINFO
  ///////////////////////////////////////////////////////////-->
  <Target Name="MINFO" DependsOnTargets="Configure;"
          Inputs="$(MSBuildProjectFullPath);@(MINFOInputs)" Outputs="$(RootDir)\MINFO;"  >
    <Exec Command="&#34;$(perl)&#34; util\mkfiles.pl &gt; MINFO" WorkingDirectory="$(RootDir)" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Creates module definition files for DLLs
  ///////////////////////////////////////////////////////////-->
  <Target Name="ModuleDefinitions"    Condition="'$(BuildType)'=='DynamicLibrary'"
          Inputs="$(RootDir)\MINFO;"  Outputs="$(RootDir)\ms\libeay32.def;$(RootDir)\ms\ssleay32.def" >
    <Exec Command="&#34;$(perl)&#34; util\mkdef.pl 32 libeay &gt; ms\libeay32.def" WorkingDirectory="$(RootDir)" />
    <Exec Command="&#34;$(perl)&#34; util\mkdef.pl 32 ssleay &gt; ms\ssleay32.def" WorkingDirectory="$(RootDir)" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Creates combined Makefile  
  ///////////////////////////////////////////////////////////-->
  <Target Name="CreateMakefile" DependsOnTargets="MINFO;"
          Inputs="$(RootDir)\MINFO;" Outputs="$(BuildDir)\openssl.mak" >

    <ItemGroup>
      <MakeOptions Include="OUT=&#34;$(OutputDir)&#34;" />
      <MakeOptions Include="INC=&#34;$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine(&#34;$(MSBuildProjectDirectory)&#34;, &#34;$(IncDir)&#34;))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))&#34;" Condition="'$(IncDir)'!=''" />
      <MakeOptions Include="TMP=&#34;$(BuildDir)&#34;" />
      <MakeOptions Include="dll"    Condition="'$(BuildType)'=='DynamicLibrary'"/>
      <MakeOptions Include="no-asm" Condition="'$(PlatformArchitecture)'!='64'"/>
      <MakeOptions Include="auto" />
    </ItemGroup>

    <Exec Command="&#34;$(perl)&#34; util\mk1mf.pl @(MakeOptions, ' ') &gt; &#34;$(BuildDir)\openssl.mak&#34;" WorkingDirectory="$(RootDir)" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Compile Assembly module
  ///////////////////////////////////////////////////////////-->
  <Target Name="CompileAsm" Condition="'$(PlatformArchitecture)'=='64'"
          Inputs="$(RootDir)\MINFO;"  Outputs="$(RootDir)\ms\uptable.obj;" >

    <Exec Command="&#34;$(perl)&#34; ms\uplink-x86_64.pl masm &gt; &#34;$(BuildDir)\uptable.asm&#34;" WorkingDirectory="$(RootDir)" />
    <Exec Command="call &#34;$(VCInstallDir)vcvarsall.bat&#34; $(PlatformTarget)
             ml64 -c -Foms\uptable.obj &#34;$(BuildDir)\uptable.asm&#34;" WorkingDirectory="$(RootDir)" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Build Target
  ///////////////////////////////////////////////////////////-->
  <Target Name="Build" DependsOnTargets="CreateMakefile;ModuleDefinitions;CompileAsm;" >
    <!--Resolve zlib-->
    <MSBuild Projects="@(ProjectReference)" Targets="GetResolvedLinkLibs"
               Condition="'%(ProjectReference.Project)'=='{8fd826f8-3739-44e6-8cc8-997122e53b8d}'" >
      <Output ItemName="ZLibPath" TaskParameter="TargetOutputs"/>
    </MSBuild>

    <MSBuild Projects="@(ProjectReference)" Targets="SourceFilesProjectOutputGroup"
             Condition="'%(ProjectReference.Project)'=='{8fd826f8-3739-44e6-8cc8-997122e53b8d}'" >
      <Output ItemName="SourceFiles" TaskParameter="TargetOutputs"/>
    </MSBuild>

    <PropertyGroup>
      <LibEnvVar Condition="'@(SourceFiles)'!='' And 
                            '%(SourceFiles.Identity)'!='' And 
                            '@(SourceFiles->Contains(&#34;zlib.h&#34;))'=='True'">INCLUDE=%(SourceFiles.RelativeDir)</LibEnvVar>
      <LibEnvVar Condition="'@(ZLibPath)'!='' And 
                            '%(ZLibPath.Extension)'=='.lib'">$(LibEnvVar);LIB=%(ZLibPath.RelativeDir)</LibEnvVar>
    </PropertyGroup>
    
    <!--Build-->
    <Copy SourceFiles="$(RootDir)\e_os.h;$(RootDir)\e_os2.h;" DestinationFolder="$(IncRootDir)" Condition="'$(IncRootDir)'!=''"  ContinueOnError="true"/>
    <Exec Command="call &#34;$(VCInstallDir)vcvarsall.bat&#34; $(PlatformTarget)
             nmake.exe -f &#34;$(BuildDir)\openssl.mak&#34;"   WorkingDirectory="$(RootDir)" EnvironmentVariables="$(LibEnvVar)"/>
    <Delete Files="$(IncRootDir)\e_os.h;$(IncRootDir)\e_os2.h;" Condition="'$(IncRootDir)'!=''" ContinueOnError="true" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Rebuild Target
  ///////////////////////////////////////////////////////////-->
  <Target Name="Rebuild" DependsOnTargets="Clean;Build;" />
  
    
  <!--
  ///////////////////////////////////////////////////////////
  // Clean Target
  ///////////////////////////////////////////////////////////-->
  <Target Name="Clean" >
    <!--Parse Makefile for build targets and delete them -->
    <ReadLinesFromFile File="$(BuildDir)\openssl.mak" Condition="Exists('$(BuildDir)\openssl.mak')">
      <Output ItemName="ConfigLines" TaskParameter="Lines"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <BuildDirSelected  Include="$(BuildDir)\*.h" />
      <BuildDirSelected  Include="$(BuildDir)\*.c" />
      <BuildDirSelected  Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(OBJ_D\)\\)(.*?\b)(?&lt;=\.obj) ))" />
      <BuildDirSelected  Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(TMP_D\)\\)(.*?\b)(?&lt;=\.asm) ))" />
      <BuildDirLibrary   Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(TMP_D\)\\)(.*?\b)(?&lt;=\.lib) ))" />
      <BuildDirSelected  Include="%(BuildDirLibrary.Filename).exp" />
      <BuildDirSelected  Include="@(BuildDirLibrary)" />
      <BuildDirSelected  Include="app.pdb;lib.pdb" />
      <OutputDirLibrary  Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(TEST_D\)\\)(.*?\b)(?&lt;=\.exe) ))" />
      <OutputDirLibrary  Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(ENG_D\)\\)(.*?\b)(?&lt;=\.dll) ))" />
      <OutputDirLibrary  Include="openssl.exe;libeay32.dll;ssleay32.dll" />
      <OutputDirSelected Include="%(OutputDirLibrary.Filename).exp;%(OutputDirLibrary.Filename).pdb;%(OutputDirLibrary.Filename).lib" />
      <OutputDirSelected Include="@(OutputDirLibrary)" />
      <OutputDirSelected Include="e_os.h;e_os2.h" />
    </ItemGroup>
    
    <CombinePath BasePath="$(BuildDir)" Paths="@(BuildDirSelected)">
      <Output ItemName="DelFiles" TaskParameter="CombinedPaths"/>
    </CombinePath>
    <CombinePath BasePath="$(OutputDir)" Paths="@(OutputDirSelected)">
      <Output ItemName="DelFiles" TaskParameter="CombinedPaths"/>
    </CombinePath>
    
    <Delete Files="@(DelFiles)" ContinueOnError="true" />
    <RemoveDir Directories="$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine(&#34;$(MSBuildProjectDirectory)&#34;, &#34;$(IncDir)&#34;))').TrimEnd($([System.IO.Path]::DirectorySeparatorChar)))" Condition="'$(IncDir)'!=''"/>
    <!-- Delete well-known files -->
    <Delete    Files="@(CleanConfig)"     ContinueOnError="true" />
    <Delete    Files="@(CleanFiles)"      ContinueOnError="true" />
    <RemoveDir Directories="@(CleanDirs)" ContinueOnError="true" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Test Target
  ///////////////////////////////////////////////////////////-->
  <Target Name="Test" >
    <CallTarget Targets="Rebuild" Condition="!Exists('$(OutputDir)\openssl.exe')" />

    
    <Exec Command="call &#34;$(VCInstallDir)vcvarsall.bat&#34; $(PlatformTarget)
             SET Path=$(OutputDir);%Path%
             call test.bat"   WorkingDirectory="$(RootDir)\ms" />
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Returns list of dlls
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetNativeTargetPath" DependsOnTargets="GetTargetList;" Returns="@(DLLFiles)"
          Condition="'$(DesignTimeBuild)' != 'true'" >
    <MSBuild Projects="@(ProjectReference)" Targets="GetNativeTargetPath" >
      <Output ItemName="NativeFiles" TaskParameter="TargetOutputs"/>
    </MSBuild>
    <ItemGroup>
      <DLLFiles Include="@(NativeFiles)" Condition="'%(Extension)'=='.dll'" />
    </ItemGroup>
  </Target>

  
  <!--
  ///////////////////////////////////////////////////////////
  // During DesignTimeBuild in order for the IDE to determine 
  // if the project resolves correctly, this target will return 
  // a fullpath to Jamroot to indicate instance of Boost library.
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetTargetPath" DependsOnTargets="GetNativeTargetPath"  Returns="@(NativeTargetPath)" >
    <ItemGroup>
      <NativeTargetPath Include="$(RootDir)\Makefile.org" Condition="'$(DesignTimeBuild)' == 'true'" />
    </ItemGroup>
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Integration with Visual Studio
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetNativeManifest" />


  <!--
  ///////////////////////////////////////////////////////////
  // During Build it returns list of link libraries.
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetResolvedLinkLibs" DependsOnTargets="GetTargetList" Returns="@(LibFullPath)" >
    <MSBuild Projects="@(ProjectReference)" Targets="GetResolvedLinkLibs" >
      <Output ItemName="LibFullPath" TaskParameter="TargetOutputs"/>
    </MSBuild>
    <ItemGroup>
      <DLLFiles     Include="$(OutputDir)\libeay32.lib;$(OutputDir)\ssleay32.lib" Condition="'@(DLLFiles)'==''"/>
      <LibFullPath  Include="%(DLLFiles.RelativeDir)%(DLLFiles.Filename).lib"     Condition="'%(DLLFiles.Identity)'!=''" >
        <ProjectType Condition="'$(BuildType)'==''">StaticLibrary</ProjectType>
        <ProjectType Condition="'$(BuildType)'!=''">$(BuildType)</ProjectType>
        <FileType>lib</FileType>
        <ResolveableAssembly>false</ResolveableAssembly>
        <WindowsAppContainer Condition="'$(ConfigurationType)' == 'DynamicLibrary'">$(WindowsAppContainer)</WindowsAppContainer>
      </LibFullPath>
    </ItemGroup>
    <Message Condition="'$(_REFERENCE_DEBUG)'=='true'" Importance="High" Text="ResolvedLinkLibs=@(LibFullPath)"/>
  </Target>


  <!--
  ///////////////////////////////////////////////////////////
  // Returns list of DLLs to copy to output dir of parent app.
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetCopyToOutputDirectoryItems" />


  <!--
  ///////////////////////////////////////////////////////////
  // Parse Makefile for list of build targets
  /////////////////////////////////////////////////////////// -->
  <Target Name="GetTargetList" Returns="@(DLLFiles)" >
    <ReadLinesFromFile File="$(BuildDir)\openssl.mak" Condition="Exists('$(BuildDir)\openssl.mak')">
      <Output ItemName="ConfigLines" TaskParameter="Lines"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <DLLs  Include="$([System.Text.RegularExpressions.Regex]::Match('%(ConfigLines.Identity)', (?&lt;=\(ENG_D\)\\)(.*?\b)(?&lt;=\.dll) ))" />
      <DLLs  Include="libeay32.dll;ssleay32.dll" Condition="'$(BuildType)'=='DynamicLibrary'" />
    </ItemGroup>
    <CombinePath BasePath="$(OutputDir)" Paths="@(DLLs)">
      <Output ItemName="DLLFiles" TaskParameter="CombinedPaths"/>
    </CombinePath>
  </Target>
    

  <!--
  ///////////////////////////////////////////////////////////
  // Custom Configuration page
  ///////////////////////////////////////////////////////////-->
  <ItemGroup>
    <PropertyPageSchema Include="openssl.xml" Condition="Exists('openssl.xml')">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="cflags.xml" Condition="Exists('cflags.xml')">
      <Context>Project</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="lflags.xml" Condition="Exists('lflags.xml')">
      <Context>Project</Context>
    </PropertyPageSchema>
  </ItemGroup>

</Project>